{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(gdalinfo:*)",
      "Bash(rm:*)",
      "Bash(conda activate:*)",
      "Bash(where conda)",
      "Bash(C:Usersazraiminiconda3Scriptsconda.exe info --envs)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" info --envs)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" \"data\\scripts\\HRRR\\download_hrrr_data.py\" --use-defaults)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''✓ eccodes imported successfully'')\nexcept Exception as e:\n    print(''✗ eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''✓ cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''✗ cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''✓ herbie imported successfully'')\nexcept Exception as e:\n    print(''✗ herbie failed:'', e)\n\")",
      "Bash(__NEW_LINE__ echo \"\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" env remove -n wf -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" env create -f environment.yml --force)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" env update -f environment.yml --prune)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" clean --packages --tarballs -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" remove -n wf --all -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" env create -f environment.yml)",
      "Bash(/dev/null)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" test_hrrr_processing.py)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport glob\nimport os\ngrib_files = glob.glob(''data/raw/NOAA_HRRR/**/*.grib2'', recursive=True)\nidx_files = glob.glob(''data/raw/NOAA_HRRR/**/*.idx'', recursive=True)\nprint(f''Found {len(grib_files)} GRIB files'')\nprint(f''Found {len(idx_files)} index files (should be 0 after cleanup)'')\nprint(''First few GRIB files:'')\nfor f in grib_files[:3]:\n    print(f''  {os.path.basename(f)}'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/process_hrrr_data.py --batch-size 5)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/process_hrrr_data_safe.py --test-run --batch-size 3)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" install -n wf netcdf4 -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/process_hrrr_data_final.py --test-run --batch-size 3)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" install -c conda-forge -n wf netcdf4 eccodes -y --no-deps)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/process_hrrr_working.py --test-run --batch-size 2)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport xarray as xr\nimport numpy as np\nprint(''=== NetCDF File Inspection ==='')\nprint()\n\n# Open and inspect the NetCDF file\nfile_path = ''data/processed/HRRR/hrrr_socal_hourly_2016_native_projection.nc''\nprint(f''Opening: {file_path}'')\n\ntry:\n    ds = xr.open_dataset(file_path)\n    \n    print(''✅ File opened successfully'')\n    print()\n    \n    # Basic file info\n    print(''📊 DATASET OVERVIEW:'')\n    print(f''  File size on disk: ~3.2MB'')\n    print(f''  Dimensions: {dict(ds.dims)}'')\n    print(f''  Number of data variables: {len(ds.data_vars)}'')\n    print(f''  Number of coordinates: {len(ds.coords)}'')\n    print()\n    \n    # Coordinate system info\n    print(''🌍 COORDINATE SYSTEM:'')\n    print(f''  Latitude range: {float(ds.latitude.min()):.2f} to {float(ds.latitude.max()):.2f}°'')\n    print(f''  Longitude range: {float(ds.longitude.min()):.2f} to {float(ds.longitude.max()):.2f}°'')\n    if hasattr(ds, ''time''):\n        print(f''  Time range: {ds.time.min().values} to {ds.time.max().values}'')\n        print(f''  Number of time steps: {len(ds.time)}'')\n    print()\n    \n    # Projection info\n    print(''🗺️ PROJECTION INFORMATION:'')\n    if hasattr(ds, ''crs'') or any(''crs'' in str(coord).lower() for coord in ds.coords):\n        crs_vars = [var for var in ds.coords if ''crs'' in str(var).lower()]\n        print(f''  CRS variables found: {crs_vars}'')\n    \n    # Check for projection attributes\n    proj_attrs = []\n    for var in ds.data_vars:\n        if hasattr(ds[var], ''grid_mapping''):\n            proj_attrs.append(f''{var}: {ds[var].grid_mapping}'')\n    if proj_attrs:\n        print(f''  Grid mappings: {proj_attrs}'')\n    else:\n        print(''  Projection: Native HRRR Lambert Conformal Conic (no explicit CRS variable)'')\n        print(''  Note: HRRR uses Lambert Conformal Conic projection with 0-360° longitude'')\n    print()\n    \n    # Data variables (the 8 sublayers)\n    print(''📋 DATA VARIABLES (SUBLAYERS):'')\n    for i, var in enumerate(ds.data_vars, 1):\n        var_data = ds[var]\n        print(f''  {i}. {var}:'')\n        print(f''     Shape: {var_data.shape}'')\n        print(f''     Dimensions: {var_data.dims}'')\n        if hasattr(var_data, ''long_name''):\n            print(f''     Description: {var_data.long_name}'')\n        if hasattr(var_data, ''units''):\n            print(f''     Units: {var_data.units}'')\n        \n        # Check for valid data\n        valid_data = np.isfinite(var_data.values).sum()\n        total_data = var_data.size\n        print(f''     Valid data points: {valid_data:,}/{total_data:,} ({100*valid_data/total_data:.1f}%)'')\n        print()\n    \n    # Global attributes\n    print(''🏷️ GLOBAL ATTRIBUTES:'')\n    for attr, value in ds.attrs.items():\n        print(f''  {attr}: {value}'')\n    \n    print()\n    print(''✅ VERIFICATION COMPLETE'')\n    print(f''Total sublayers found: {len(ds.data_vars)}'')\n    \n    ds.close()\n    \nexcept Exception as e:\n    print(f''❌ Error opening file: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport xarray as xr\nimport numpy as np\n\nprint(''=== NetCDF File Inspection ==='')\nprint()\n\n# Open and inspect the NetCDF file using scipy engine\nfile_path = ''data/processed/HRRR/hrrr_socal_hourly_2016_native_projection.nc''\nprint(f''Opening: {file_path}'')\n\ntry:\n    # Try scipy engine first\n    ds = xr.open_dataset(file_path, engine=''scipy'')\n    \n    print(''File opened successfully with scipy engine'')\n    print()\n    \n    # Basic file info\n    print(''DATASET OVERVIEW:'')\n    print(f''  Dimensions: {dict(ds.dims)}'')\n    print(f''  Number of data variables: {len(ds.data_vars)}'')\n    print(f''  Number of coordinates: {len(ds.coords)}'')\n    print()\n    \n    # Coordinate system info\n    print(''COORDINATE SYSTEM:'')\n    print(f''  Latitude range: {float(ds.latitude.min()):.2f} to {float(ds.latitude.max()):.2f} degrees'')\n    print(f''  Longitude range: {float(ds.longitude.min()):.2f} to {float(ds.longitude.max()):.2f} degrees'')\n    if hasattr(ds, ''time''):\n        print(f''  Time range: {str(ds.time.min().values)} to {str(ds.time.max().values)}'')\n        print(f''  Number of time steps: {len(ds.time)}'')\n    print()\n    \n    # Projection info\n    print(''PROJECTION INFORMATION:'')\n    print(''  Projection: Native HRRR Lambert Conformal Conic'')\n    print(''  Longitude system: 0-360 degrees (236-245 = 115W-123W)'')\n    print(''  Latitude system: Standard geographic (-90 to 90)'')\n    print()\n    \n    # Data variables (the sublayers)\n    print(''DATA VARIABLES (SUBLAYERS):'')\n    var_count = 0\n    for var in ds.data_vars:\n        var_count += 1\n        var_data = ds[var]\n        print(f''  {var_count}. {var}:'')\n        print(f''     Shape: {var_data.shape}'')\n        print(f''     Dimensions: {var_data.dims}'')\n        if hasattr(var_data, ''long_name''):\n            print(f''     Description: {var_data.long_name}'')\n        if hasattr(var_data, ''units''):\n            print(f''     Units: {var_data.units}'')\n        print()\n    \n    print(''VERIFICATION RESULTS:'')\n    print(f''  Total sublayers found: {len(ds.data_vars)}'')\n    print(f''  Expected sublayers: 8 (various weather variables)'')\n    \n    if len(ds.data_vars) >= 6:\n        print(''  Status: SUCCESS - File contains multiple weather variables'')\n    else:\n        print(''  Status: PARTIAL - Fewer variables than expected'')\n    \n    # Check if this is the correct projection\n    lon_min, lon_max = float(ds.longitude.min()), float(ds.longitude.max())\n    lat_min, lat_max = float(ds.latitude.min()), float(ds.latitude.max())\n    \n    print()\n    print(''GEOGRAPHIC BOUNDS CHECK:'')\n    print(f''  Longitude: {lon_min:.1f} to {lon_max:.1f} (should be ~236-245 for SoCal)'')\n    print(f''  Latitude: {lat_min:.1f} to {lat_max:.1f} (should be ~31-38 for SoCal)'')\n    \n    if 235 <= lon_min <= 237 and 244 <= lon_max <= 246 and 30 <= lat_min <= 32 and 37 <= lat_max <= 39:\n        print(''  Geographic bounds: CORRECT - Data covers Southern California'')\n    else:\n        print(''  Geographic bounds: Check required - May need verification'')\n    \n    ds.close()\n    \nexcept Exception as e:\n    print(f''Error opening file: {e}'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" install -c conda-forge -n wf netcdf4 -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport h5py\nimport os\n\nprint(''=== NetCDF/HDF5 File Inspection ==='')\nprint()\n\nfile_path = ''data/processed/HRRR/hrrr_socal_hourly_2016_native_projection.nc''\nfile_size = os.path.getsize(file_path)\n\nprint(f''File: {file_path}'')\nprint(f''Size: {file_size:,} bytes ({file_size/1024/1024:.1f} MB)'')\nprint()\n\ntry:\n    with h5py.File(file_path, ''r'') as f:\n        print(''HDF5 File Structure:'')\n        \n        def print_structure(name, obj):\n            indent = ''  '' * (name.count(''/''))\n            if isinstance(obj, h5py.Dataset):\n                print(f''{indent}{name}: Dataset {obj.shape} {obj.dtype}'')\n                # Try to get attributes\n                if obj.attrs:\n                    for attr_name, attr_val in obj.attrs.items():\n                        try:\n                            print(f''{indent}  @{attr_name}: {attr_val}'')\n                        except:\n                            print(f''{indent}  @{attr_name}: <complex attribute>'')\n            elif isinstance(obj, h5py.Group):\n                print(f''{indent}{name}: Group'')\n        \n        # Print root attributes\n        print(''Global Attributes:'')\n        for attr_name, attr_val in f.attrs.items():\n            try:\n                print(f''  {attr_name}: {attr_val}'')\n            except:\n                print(f''  {attr_name}: <complex attribute>'')\n        print()\n        \n        print(''Dataset Structure:'')\n        f.visititems(print_structure)\n        \n        # Count data variables vs coordinates\n        datasets = []\n        coordinates = []\n        \n        def categorize_items(name, obj):\n            if isinstance(obj, h5py.Dataset):\n                # Simple heuristic: coordinates usually have 1D arrays with same name as dimension\n                if len(obj.shape) == 1 and name.split(''/'')[-1] in [''time'', ''latitude'', ''longitude'', ''x'', ''y'']:\n                    coordinates.append(name)\n                else:\n                    datasets.append(name)\n        \n        f.visititems(categorize_items)\n        \n        print()\n        print(''SUMMARY:'')\n        print(f''  Data variables (sublayers): {len(datasets)}'')\n        print(f''  Coordinate variables: {len(coordinates)}'')\n        print()\n        print(''Data Variables:'')\n        for i, dataset in enumerate(datasets, 1):\n            print(f''  {i}. {dataset}'')\n        \n        print()\n        print(''Coordinates:'')\n        for coord in coordinates:\n            print(f''  - {coord}'')\n        \n        # Check specific coordinate ranges if available\n        if ''latitude'' in f:\n            lat_data = f[''latitude''][:]\n            print(f''\\nLatitude range: {lat_data.min():.2f} to {lat_data.max():.2f}'')\n        \n        if ''longitude'' in f:\n            lon_data = f[''longitude''][:]\n            print(f''Longitude range: {lon_data.min():.2f} to {lon_data.max():.2f}'')\n        \n        if ''time'' in f:\n            time_data = f[''time'']\n            print(f''Time dimension: {len(time_data)} steps'')\n\nexcept Exception as e:\n    print(f''Error reading HDF5 file: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport xarray as xr\nimport glob\nimport os\n\n# Find a GRIB file\ngrib_files = glob.glob(''data/raw/NOAA_HRRR/**/*.grib2'', recursive=True)\nif grib_files:\n    grib_file = grib_files[0]\n    print(f''Checking GRIB file: {os.path.basename(grib_file)}'')\n    print()\n    \n    # Try to open with different level filters to see what''s available\n    level_configs = [\n        ({''filter_by_keys'': {''typeOfLevel'': ''heightAboveGround'', ''level'': 2}}, ''2m variables''),\n        ({''filter_by_keys'': {''typeOfLevel'': ''heightAboveGround'', ''level'': 10}}, ''10m variables''),\n        ({''filter_by_keys'': {''typeOfLevel'': ''surface''}}, ''surface variables''),\n        ({}, ''all variables (no filter)'')\n    ]\n    \n    for config, desc in level_configs:\n        try:\n            print(f''=== {desc.upper()} ==='')\n            ds = xr.open_dataset(grib_file, engine=''cfgrib'', backend_kwargs=config)\n            print(f''Variables found: {list(ds.data_vars.keys())}'')\n            print()\n            ds.close()\n        except Exception as e:\n            print(f''Error with {desc}: {e}'')\n            print()\nelse:\n    print(''No GRIB files found'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''✓ eccodes imported successfully'')\nexcept Exception as e:\n    print(''✗ eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''✓ cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''✗ cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''✓ herbie imported successfully'')\nexcept Exception as e:\n    print(''✗ herbie failed:'', e)\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" create -n wf python=3.11 -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" install -c conda-forge -n wf xarray pandas dask cfgrib eccodes netcdf4 -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''✓ eccodes imported successfully'')\nexcept Exception as e:\n    print(''✗ eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''✓ cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''✗ cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''✓ herbie imported successfully'')\nexcept Exception as e:\n    print(''✗ herbie failed:'', e)\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''✓ eccodes imported successfully'')\nexcept Exception as e:\n    print(''✗ eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''✓ cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''✗ cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''✓ herbie imported successfully'')\nexcept Exception as e:\n    print(''✗ herbie failed:'', e)\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport glob\nimport os\n\n# Find a GRIB file\ngrib_files = glob.glob(''data/raw/NOAA_HRRR/**/*.grib2'', recursive=True)\nif grib_files:\n    grib_file = grib_files[0]\n    print(f''Checking GRIB file: {os.path.basename(grib_file)}'')\n    print()\n    \n    # Try to open with different level filters to see what''s available\n    level_configs = [\n        ({''filter_by_keys'': {''typeOfLevel'': ''heightAboveGround'', ''level'': 2}}, ''2m variables''),\n        ({''filter_by_keys'': {''typeOfLevel'': ''heightAboveGround'', ''level'': 10}}, ''10m variables''),\n        ({''filter_by_keys'': {''typeOfLevel'': ''surface''}}, ''surface variables''),\n        ({}, ''all variables (no filter)'')\n    ]\n    \n    for config, desc in level_configs:\n        try:\n            print(f''=== {desc.upper()} ==='')\n            ds = xr.open_dataset(grib_file, engine=''cfgrib'', backend_kwargs=config)\n            print(f''Variables found: {list(ds.data_vars.keys())}'')\n            print()\n            ds.close()\n        except Exception as e:\n            print(f''Error with {desc}: {e}'')\n            print()\nelse:\n    print(''No GRIB files found'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport glob\nimport os\n\n# Check what GRIB files we have\ngrib_files = glob.glob(''data/raw/NOAA_HRRR/**/*.grib2'', recursive=True)\nprint(f''Found {len(grib_files)} GRIB files'')\nprint(''First few GRIB files:'')\nfor f in grib_files[:3]:\n    print(f''  {os.path.basename(f)}'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''✓ eccodes imported successfully'')\nexcept Exception as e:\n    print(''✗ eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''✓ cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''✗ cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''✓ herbie imported successfully'')\nexcept Exception as e:\n    print(''✗ herbie failed:'', e)\n\ntry:\n    import xarray as xr\n    print(''✓ xarray imported successfully'')\nexcept Exception as e:\n    print(''✗ xarray failed:'', e)\n\ntry:\n    import pandas as pd\n    print(''✓ pandas imported successfully'')\nexcept Exception as e:\n    print(''✗ pandas failed:'', e)\n\ntry:\n    import dask\n    print(''✓ dask imported successfully'')\nexcept Exception as e:\n    print(''✗ dask failed:'', e)\n\ntry:\n    import rioxarray\n    print(''✓ rioxarray imported successfully'')\nexcept Exception as e:\n    print(''✗ rioxarray failed:'', e)\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''SUCCESS: eccodes imported successfully'')\nexcept Exception as e:\n    print(''FAILED: eccodes failed:'', e)\n\ntry:\n    import cfgrib\n    print(''SUCCESS: cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''FAILED: cfgrib failed:'', e)\n\ntry:\n    import herbie\n    print(''SUCCESS: herbie imported successfully'')\nexcept Exception as e:\n    print(''FAILED: herbie failed:'', e)\n\ntry:\n    import xarray as xr\n    print(''SUCCESS: xarray imported successfully'')\nexcept Exception as e:\n    print(''FAILED: xarray failed:'', e)\n\ntry:\n    import pandas as pd\n    print(''SUCCESS: pandas imported successfully'')\nexcept Exception as e:\n    print(''FAILED: pandas failed:'', e)\n\ntry:\n    import dask\n    print(''SUCCESS: dask imported successfully'')\nexcept Exception as e:\n    print(''FAILED: dask failed:'', e)\n\ntry:\n    import rioxarray\n    print(''SUCCESS: rioxarray imported successfully'')\nexcept Exception as e:\n    print(''FAILED: rioxarray failed:'', e)\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" install -c conda-forge -n wf eccodes cfgrib herbie-data rioxarray -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''SUCCESS: eccodes imported successfully'')\nexcept Exception as e:\n    print(''FAILED: eccodes failed:'', str(e)[:100])\n\ntry:\n    import cfgrib\n    print(''SUCCESS: cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''FAILED: cfgrib failed:'', str(e)[:100])\n\ntry:\n    import herbie\n    print(''SUCCESS: herbie imported successfully'')\nexcept Exception as e:\n    print(''FAILED: herbie failed:'', str(e)[:100])\n\ntry:\n    import rioxarray\n    print(''SUCCESS: rioxarray imported successfully'')\nexcept Exception as e:\n    print(''FAILED: rioxarray failed:'', str(e)[:100])\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" list -n wf eccodes)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" remove -n wf eccodes python-eccodes cfgrib herbie-data -y)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/download_hrrr_data.py --help)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" data/scripts/HRRR/process_hrrr_data.py --help)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -m pip install herbie-data)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -m pip install --upgrade rasterio rioxarray)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport glob\nimport os\n\n# Find all GRIB files\ngrib_files = glob.glob(''data/raw/NOAA_HRRR/**/*.grib2'', recursive=True)\nprint(f''Found {len(grib_files)} GRIB files'')\nprint(''First few GRIB files:'')\nfor f in grib_files[:5]:\n    print(f''  {os.path.basename(f)}'')\nprint()\n\n# Check directory structure\ndirs = glob.glob(''data/raw/NOAA_HRRR/*/'', recursive=False)\nprint(f''Found {len(dirs)} subdirectories:'')\nfor d in dirs[:10]:\n    print(f''  {os.path.basename(d.rstrip(\"\"/\"\"))}'')\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Environment packages check...'')\n\ntry:\n    import eccodes\n    print(''SUCCESS: eccodes imported successfully'')\nexcept Exception as e:\n    print(''FAILED: eccodes failed:'', str(e)[:100])\n\ntry:\n    import cfgrib\n    print(''SUCCESS: cfgrib imported successfully'')  \nexcept Exception as e:\n    print(''FAILED: cfgrib failed:'', str(e)[:100])\n\ntry:\n    import rioxarray\n    print(''SUCCESS: rioxarray imported successfully'')\nexcept Exception as e:\n    print(''FAILED: rioxarray failed:'', str(e)[:100])\n\ntry:\n    import zarr\n    print(''SUCCESS: zarr imported successfully'')\nexcept Exception as e:\n    print(''FAILED: zarr failed:'', str(e)[:100])\n\")",
      "WebFetch(domain:hrrrzarr.s3.amazonaws.com)",
      "Bash(powershell:*)",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\Scripts\\conda.exe\" run -n wf python -c \"import rasterio; import numpy as np; import os; os.chdir(''C:/Users/azrai/Documents/GitHub/mysterymeat/NOAA-FLPS/data/raw/SRTM''); with rasterio.open(''N33W118.hgt'') as src: print(f''Shape: {src.shape}''); print(f''CRS: {src.crs}''); print(f''Transform: {src.transform}''); print(f''Bounds: {src.bounds}''); print(f''Dtype: {src.dtypes[0]}'')\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"import rasterio; import numpy as np; import os; os.chdir(''C:/Users/azrai/Documents/GitHub/mysterymeat/NOAA-FLPS/data/raw/SRTM''); with rasterio.open(''N33W118.hgt'') as src: print(f''Shape: {src.shape}''); print(f''CRS: {src.crs}''); print(f''Transform: {src.transform}''); print(f''Bounds: {src.bounds}''); print(f''Dtype: {src.dtypes[0]}''); print(f''Nodata: {src.nodata}'')\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport rasterio\nimport numpy as np\nimport os\n\n# Change to SRTM directory\nos.chdir(''C:/Users/azrai/Documents/GitHub/mysterymeat/NOAA-FLPS/data/raw/SRTM'')\n\n# Analyze one SRTM file\nwith rasterio.open(''N33W118.hgt'') as src:\n    print(''Shape:'', src.shape)\n    print(''CRS:'', src.crs)\n    print(''Transform:'', src.transform)\n    print(''Bounds:'', src.bounds)\n    print(''Dtype:'', src.dtypes[0])\n    print(''Nodata:'', src.nodata)\n    \n    # Read a small sample\n    sample = src.read(1, window=((0, 100), (0, 100)))\n    print(''Sample elevation range:'', sample.min(), ''to'', sample.max(), ''meters'')\n\")",
      "Bash(\"C:\\Users\\azrai\\miniconda3\\envs\\wf\\python.exe\" -c \"\nimport sys\nprint(''Python path:'', sys.executable)\nprint(''Checking available libraries...'')\n\ntry:\n    import numpy as np\n    print(''✓ numpy available'')\nexcept Exception as e:\n    print(''✗ numpy failed:'', e)\n\ntry:\n    import xarray as xr\n    print(''✓ xarray available'')\nexcept Exception as e:\n    print(''✗ xarray failed:'', e)\n\ntry:\n    import rasterio\n    print(''✓ rasterio available'')\nexcept Exception as e:\n    print(''✗ rasterio failed:'', str(e)[:100])\n\ntry:\n    import rioxarray\n    print(''✓ rioxarray available'')\nexcept Exception as e:\n    print(''✗ rioxarray failed:'', str(e)[:100])\n\")"
    ],
    "deny": []
  }
}